-*- org -*-

FAILURE means:
  + Exit status: >0
  + Failing target will not be modified (but a tempfile will be created).
  + Failing target's metadata will not be modified.
  + Nota Bene: Successful dependencies will be built even on error.

SUCCESS means:
  + Exit status: 0

Exit status:
  0  = Success.
  1  = Won't overwrite target (anything fixable by --force).
  5  = Build failed (buildscript returned non-zero exit value).
  6  = Failed to write target (even though build succeeded). E.g. target dir
       could not be created, old target (or the target directory) was write
       protected or similar.
  7  = Failed to write metadata.
  10 = Couldn't read buildscript or source (permission denied, or file
       missing, or missing buildscript or source directories).
  15 = Bad options provided.

* VAGUE FUTURE IDEAS
** TODO Garbage collecting of metadata files?
** TODO Handling of circular dependencies
* Early error messages
  Check early error messages (missing files, bad options) are emitted properly.
** DONE 01-missing-source-dir
   01: Attempt to build target when there is no source dir.

   * FAILURE
     + Exit status: 10
     + No tempfile created.
     + No target file created.
** DONE 02-missing-script-dir
   02: Attempt to build target when there is no script dir.

   * FAILURE
     + Exit status: 10
     + No tempfile created.
     + No target file created.
** DONE 03-missing-build-script
03: Attempt to build target when there is no buildscript for it.

   * FAILURE
     + Exit status: 10
     + No tempfile created.
     + No target file created.
** DONE 04-buildscript-with-unset-read-bits
04: Attempt to build target with buildscript with read bits unset.

   * FAILURE
     + Exit status: 10
     + No tempfile created.
     + No target file created.
** DONE 05-buildscript-with-unset-execute-bits
05: Attempt to build target with buildscript with execute bits unset.

   * FAILURE
     + Exit status: 10
     + No tempfile created.
     + No target file created.
* One target with no dependencies
  Check buildscript return values, that target and metadata files are only
  updated when they should, and that file timestamps does not affect this.
** DONE 06-buildscript-with-nonzero-exit-status
06: Attempt to build target with buildscript that returns non-zero exit
    status.

   * FAILURE
     + Exit status: 5
     + Tempfile created.
     + No target file created.
** DONE 07. Successful build
   Build target with buildscript that returns zero exit status.

   This result in a base setup, with one successfully built target.

   * SUCCESS
     + Exit status: 0
     + No tempfile existing.
     + Target file created.
     + Metadata modified.
** DONE 08. Rebuilding successful build
   CLOSED: [2014-07-07 Mon 09:04]
   Rebuild target that has already been built. (Based on 07.)

   * SUCCESS
     + Exit status: 0
     + No tempfile existing.
     + Target file unmodified.
     + Metadata unmodified.
** DONE 09. Rebuild with target timestamp in past
   CLOSED: [2014-07-08 Tue 08:44]
   Attempt to rebuild target that has already been built, after target file's
   timestamp have been moved into the past. (Based on 07.)

   Target timestamp is set to: 2000-01-01

   * SUCCESS
     + Exit status: 0
     + No tempfile existing.
     + Target file unmodified.
     + Metadata unmodified.
** DONE 10. Rebuild with target timestamp in future
   CLOSED: [2014-07-08 Tue 08:44]
   Attempt to rebuild target that has already been built, after target file's
   timestamp have been moved into the future. (Based on 07.)

   Target timestamp is set to: 2030-01-01

   * SUCCESS
     + Exit status: 0
     + No tempfile existing.
     + Target file unmodified.
     + Metadata unmodified.
** TODO Rebuild with buildscript timestamp in past
   Attempt to rebuild target that has already been built, after target's
   buildscript's timestamp have been moved into the past. (Based on 07.)

   Target timestamp is set to: 2000-01-01

   * SUCCESS
     + Exit status: 0
     + No tempfile existing.
     + Target file unmodified.
     + Metadata unmodified.
** TODO Rebuild with buildscript timestamp in future
   Attempt to rebuild target that has already been built, after target's
   buildscript's timestamp have been moved into the future. (Based on 07.)

   Target timestamp is set to: 2030-01-01

   * SUCCESS
     + Exit status: 0
     + No tempfile existing.
     + Target file unmodified.
     + Metadata unmodified.
** TODO Rebuild with metadata timestamp in past
   Attempt to rebuild target that has already been built, after target's
   metadata file's timestamp have been moved into the past. (Based on 07.)

   Target timestamp is set to: 2000-01-01

   * SUCCESS
     + Exit status: 0
     + No tempfile existing.
     + Target file unmodified.
     + Metadata unmodified.
** TODO Rebuild with metadata timestamp in future
   Attempt to rebuild target that has already been built, after target's
   metadata file's timestamp have been moved into the future. (Based on 07.)

   Target timestamp is set to: 2030-01-01

   * SUCCESS
     + Exit status: 0
     + No tempfile existing.
     + Target file unmodified.
     + Metadata unmodified.
** TODO Rebuild with modified buildscript producing same output
Attempt to rebuild target after buildscript modified (by a comment or similar)
    in such a way that it still produces the same output as it previously did.
    (Base 07.)

   * SUCCESS
     + Exit status: 0
     + No tempfile existing.
     + Target file not updated.
     + Metadata updated (to contain new buildscript checksum)
** TODO Rebuild with modified buildscript
Attempt to rebuild target after buildscript have been changed so that it
    outputs something new. (Based on 07.)

   * SUCCESS
     + Exit status: 0
     + No tempfile existing.
     + Target file updated.
     + Metadata updated.
** TODO Rebuild with modified target file
Build target when previous target exist and is modified.

   * FAILURE
     + Exit status: 1
     + Target file unmodified.
     + Metadata unmodified.
** TODO Rebuild with modified target & buildscript outputting same
Build target when previous target exist and is modified, but new buildscript
outputs target identical to modified target.

   * SUCCESS
     + Exit status: 0
     + Target file unmodified (old version kept).
     + Metadata updated.
* Lockfile-related stuff
  Check that lockfile is cleared on non-normal termination. And that it works
  to avert parallel execution of fix.
** DONE xx-run-two-simultaneous-instances-of-fix
   Attempt to run two copies of fix at once. First instance should build,
   second instance should detect lockfile and refuse to start.

   * 1st instance: SUCCESS
     + Exit status: 0
     + No tempfile existing.
     + Target file created.
     + Metadata modified.

   * 2nd instance: FAILURE
     + Exit status: 8
     + No tempfile created.
     + No target file created.
** TODO Receiving Ctrl-C (SIGTERM)
Send ctrl-c (SIGINT) to fix as its building and see that it returns correct
exit code and clears its lockfile.

This signal should be sent to fix's process group by means of a negative PID
(in order to kill all subprocesses).

   * FAILURE
     + Exit status: 130 (128 + 2 = INT)
     + No lockfile exists.
** TODO Normal kill (SIGINT)
Send SIGTERM to fix as its building and see that it returns correct exit code
and clears its lockfile.

This signal should be sent to fix's process group by means of a negative PID
(in order to kill all subprocesses).

   * FAILURE
     + Exit status: 143 (128 + 15 = TERM)
     + No lockfile exists.
** TODO Terminal hangup (SIGHUP)
Send SIGHUP to fix as its building and see that it returns correct exit code
and clears its lockfile.

This signal should be sent to fix's process group by means of a negative PID
(in order to kill all subprocesses).

   * FAILURE
     + Exit status: 129 (128 + 1 = HUP)
     + No lockfile exists.
* Automatic buildscript dependency
  Checks to see that the automatically added dependency on the buildscript
  works as it should.
* Source dependency
** TODO Source file dependency
** TODO Source file dependency with timestamp in the past
** Source file dependency with timestamp in the future
** Source file dependency
* Target dependency
** TODO Build target with one dependency
   Build target A with dependency B
   * SUCCESS
     + Exit status: 0
     + Both targets created.
     + Both metadata files created.
** TODO Rebuild target with one dependency
  * SUCCESS
    + Exit status: 0
    + Neither target modified.
    + Neither metadata file modified.
** TODO Rebuild target with modified dependency
** TODO Rebuild target with erased metadata and modified buildscript
Build target when previous target exist but have no metadata stored, and the
newly built target differs from the old target.

   * FAILURE
     + Exit status: 1
** TODO Rebuild target with erased metadata
Build target when previous target exist but have no metadata stored, and the
newly built target is the same as the old target.

   * SUCCESS
     + Exit status: 0
* 'default.fix' target dependency
** TODO Build using default buildscript ('default.fix')
Build target using default.fix.
** TODO Build using default buildscript in parent dir
Build target using '../default.fix'.
** TODO Rebuild target built by default buildscript, now by target
Rebuild target that was previously build by default.fix, with a new
TARGET.fix.
* [eof]
