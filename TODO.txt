-*- org -*-

* Program
** TODO Dependencies
** TODO Add man page
** TODO Pass arguments to buildscripts
** TODO Write dependencies to tempfile, finalize when build is done
** TODO Add source dependencies
** TODO Allow target to be specified relative to current dir
   Currently, if you're rebuilding a target called `build/TARGET`, and
   $FIX_TARGET_DIR is set to `build`, you'll need to be in the root of the
   worktree and invoke Fix as:

       fix TARGET

   This should not be the case. Targets should always be specified relative to
   the users current directory, so that if you were *inside* $FIX_TARGET_DIR,
   you should use the above command, but at the root of the worktree you should
   instead name the target dir explicitly and use:

       fix build/TARGET

   And if you were inside a dir called `build/x` you should be able to invoke
   Fix with:

       fix ../TARGET

   And from inside your $FIX_SCRIPT_DIR, you might use:

       fix ../build/TARGET

   Etc.
** TODO More thorough is_mother() tests
   Should be able to detect an inconsistent state and abort. I.e. it should
   check *all* parent/child variables, and return true/false if they're all set
   or unset and abort with an error message if there's something inconsistent
   about them.

   If $FIX_LEVEL > 0 then error unless
       FIX is set to executable file
       PID is existing Fix process
       FIX_LOCK exists and contains same PID as $FIX_PID
       FIX_SCRIPT_DIR
       FIX_SOURCE_DIR
       FIX_TARGET_DIR
       FIX_TARGET
       FIX_PARENT
** TODO Automatic unlocking of stale lockfile
** TODO Don't build target (at all) if up-to-date target already exists
   Currently new target built into a tempfile, and existing target will never
   be overwritten unless the new target has been updated. But the new target
   does not ever have to be built if we know no changes has been made to any of
   the dependencies.
** TODO Proper signal handling
   Nota bene: Rewrite trapping of lockfile so these traps do not clobber each
   other.

   [[http://www.cons.org/cracauer/sigint.html][Proper handling of SIGINT/SIGQUIT]] is an interesting on how to handle
   signals. Under the headline "How to be a proper shell" there is a
   description of what to do when catching a child signal, while wait()ing.

   1. While waiting for child process, take note of any signal received.
   2. Wait for child to exit, get exit status.
   3. If signal any signal was received during wait:
      1. Check whether child received one of the trapped signals: If so re-kill
         yourself with the same signal (so that programs upstream can determine
         that you received a signal).

   [[http://mywiki.wooledge.org/SignalTrap][Sending and Trapping Signals]] says: There is a core set of signals common to
   all Unix-like operating systems whose numbers realistically never change;
   the most common of these are:

   |------+----+--------------------------------------------------------|
   | HUP  |  1 | Hang Up. The controlling terminal has gone away.       |
   | INT  |  2 | Interrupt. The user has pressed Ctrl-C.                |
   | QUIT |  3 | Quit. The user has pressed Ctrl-\. Exit and dump core. |
   | KILL |  9 | Kill. Unconditionally fatal. No cleanup possible.      |
   | TERM | 15 | Terminate. Default `kill` signal.                      |
   |------+----+--------------------------------------------------------|
** TODO Mother process should ignore $FIX_FORCE/$FIX_DEBUG, only use options
   Reset $FIX_DEBUG and $FIX_FORCE (if set), and use only --debug and --force.
   Child processes still need to listen to the environment variables, though.
** TODO Options for setting $FIX_SCRIPT_DIR, $FIX_SOURCE_DIR, $FIX_TARGET_DIR
** TODO Internal filenames look like 'TARGET:index.html' etc(?)
   Currently we pass around $TYPE + $FILE in a bunch of places, but maybe these
   should be collected (and stored in the state files) as one string.

   Test to see if this refactoring would simplify the code.
* Testing
** TODO Create dep -> dep -> dep test with modified buildscript for leaf dep
   When building a dep1 -> dep2 -> dep3 chain, see that if dep3 has a modified
   buildscript that produces the same output, none of targets should be
   overwritten, but remain exactly as they are.
** TODO Check for non-existence of metadata tempfiles
** TODO Test that buildscript checksums are written in all metadata
** TODO Test second line (if any) of metadata: It should be buildscript
** TODO Version test case should check copyright year as well
   Test that checks output of `--version` should be expanded to enforce the
   year part of the version message as well, not just the version number.
** TODO Test for reading of command line arguments
** TODO Add test for --debug (and -D) option
** TODO Add test for --force (and -f) option
** TODO Add test for --help (and -h) option
** TODO Remove test case dependency on pre-configured dir
   Each test should instead write all the files they need explicitly (including
   timestamps) in the test itself (making each test file self contained).

   This also simplifies renaming of tests, since there will no longer be any
   symlinks that point to a non-existing directory after that directory has
   been renamed.
** TODO Make tests uniform
   Tests should be as uniform as possible to be easily diff:able.
** TODO Test cases should describe outcome of test explicitly
   The test case descriptions should be rephrased to use the word 'should'.

   + 'e09-rebuild-dep-target-modified.t' is an example of this.
** TODO Remove TODO tests in all `t/e*sourcedep*.t` tests
** TODO t/e*sourcedep*.t test cases need to look at dependency data     :NOW:
   (they now *pass* even though FIX_SOURCE doesn't do anything!)
** TODO 'test_init' should set state dir root
   '.fix/state' is the current state dir root, this should be exported in a
   variable from test_init so we won't have to change it in a hundred different
   test files if it ever changes.
** TODO Mooooaaar test cases!
** TODO Profiling the code (using Devel::NYTProf)
** TODO Test code coverage (Devel::Cover)
* FUTURE
** TODO Outputting dependency graph
   As a dotviz file?
** TODO Support for listdeps
   Tag certain dependencies as 'listing dependencies' (or listdeps) in Fix's
   internal state. A listdep is a dependency, that lists (or defines) which
   other dependencies. Whenever a listdep has changed we can no longer be sure
   that the dependency graph is the same without first rebuilding the target
   whose listdep(s) has changed.

   If no listdeps has changed in the full dependency graph, then we still know
   the exact shape of the graph, though we might still have to rebuild a couple
   of files here or there.

   All buildscripts are listdeps (and presumably there will be no other
   listdeps but the buildscripts in most projects), but let's say that a
   buildscript pulled in content from several files, which were all listed in a
   file called `list.txt`. If `list.txt` were to change, the number of files
   read by the buildscript would also change. Thus `list.txt` should be
   declared as a listdep.
** TODO Add support for newlines in filenames(?)
   Could maybe use trailing backslash in filename to indicate line continuation
   and newline?
** [0%] Parallel builds
*** TODO Make compatible job server?
*** TODO Writing build metadata in parallel
    When building with multiple targets, each target should build in parallel,
    and each should write its build metadata to a separate file. E.g. invoking
    `fix a.txt b.txt c.txt` from inside `above.txt.fix` should cause three
    temporary build metadata files to be written (one for each argument):

        above.txt--fixing.1      # tempfile of first target
        above.txt--fixing.2      # .. second target
        above.txt--fixing.3      # etc.

    Upon finalizing the build these should be concatenated by fix before being
    renamed to their permanent name, e.g. something like this:

        cat above.txt--fixing.1 \
            above.txt--fixing.2 \
            above.txt--fixing.3 >above.txt--fixing
        mv above.txt--fixing above.txt
* DONE
** DONE Tests should be run in tempdir
   CLOSED: [2014-07-07 Mon 00:28]
** DONE BUGFIX: Eliminate name collision with lockfile
   CLOSED: [2014-07-07 Mon 00:36]
   Moved build state metadata into dir '.fix/state', while the lockfile
   continues to be called 'lock.pid'.
** DONE Tests which uses pre-defined metadata
   CLOSED: [2014-07-07 Mon 09:11]
   I.e. a whole bunch of tests are based on a state where a target has already
   been built once. This should use stored metadata (which could be easily
   re-built in case the metadata format changes).
** DONE Clean up and systematize test scripts
   CLOSED: [2014-07-11 Fri 21:19]
   Descriptions in TESTS.txt as well as the scripts themselves.
** DONE Eliminate need for 'sleep 1'
   CLOSED: [2014-07-13 Sun 05:04]
   Instead move timestamp backwards for all relevant files. (Is this really
   needed, or covered by the current test cases?) Modify chtime function to
   work for this.

   Test time went down from 14 seconds to 2 seconds (with 20 tests).
** DONE Modified 'init_test' + added 'cpdir'
   CLOSED: [2014-07-26 Sat 21:45]
   'init_test' no longer helps in creating the directory structure of the
   test's tempdir. Instead this has to be done manually (which simplifies
   reading the test script, since you can immediately see which directories are
   created).

   Added help function 'cpdir' which simplifies copying the relevant data
   directories from the test script data dir.
** DONE Test scripts should use 'title'
   CLOSED: [2014-07-25 Sun 00:19]
** DONE Add test for descriptions in TESTS.txt
   CLOSED: [2014-08-18 Mon 02:38]
** DONE Support for SCRIPT|SOURCE|TAGET dirs in metadata
   CLOSED: [2015-10-27 Tue 08:58]
   Metadata now has a third word for each file, specifying whether the file is
   a SCRIPT (*.fix) file, SOURCE file (dependency declared with `fix
   --source`), or a TARGET file.

   This distinction is maintained in order to allow there three different types
   of files to be stored in different directories, and allowing the user to set
   these directories between invocations.
** DONE Test metadata contents
   CLOSED: [2015-10-29 Thu 15:40]
   Add a function to the end of 'dashtap.sh' which can create the expected
   content for the metadata file, given the names of the files which should be
   in there.

   In (some of?) the failing cases we'll need to generate this before running
   the actual tests.
** DONE Build failure should terminate with exit status: 1
   CLOSED: [2015-11-12 Thu 22:15]
   Exit status 1 should be used for build errors (since it'll presumably be the
   most common error).
** DONE Kill invoking buildscript (if any) on error
   CLOSED: [2015-11-12 Thu 22:26]
** DONE Quote all variables
   CLOSED: [2015-11-12 Thu 22:58]
** DONE error() function should be called die()
   CLOSED: [2015-11-12 Thu 23:23]
** DONE Use `set -eu` "strict mode"
   CLOSED: [2015-11-13 Fri 00:42]
   Inspired by [[http://redsymbol.net/articles/unofficial-bash-strict-mode/][The Unofficial Bash Strict Mode]].

   `set -e` - Exit immediately if any untested command fails. The exit status
   of a command is considered to be explicitly tested if the command is used to
   control an `if`, `elif`, `while`, or `until`; or if the command is the left
   hand operand of an `&&` or `||` operator.

   `set -u` - Write a message to standard error when attempting to expand a
   variable that is not set, and exit immediately.
** DONE Test $FIX_LEVEL and $FIX_PARENT environment variables
   CLOSED: [2015-11-13 Fri 01:56]
   Add a buncha testcases that look to see if buildscripts have the right
   FIX_TARGET & FIX_PARENT, at start and further down the dependency tree
** DONE $FIX_PARENT should be set
   CLOSED: [2015-11-13 Fri 01:57]
** DONE Parsing of options: --debug, --force and --source
   CLOSED: [2015-11-13 Fri 08:32]
   Initially add the following options: --debug, --force and --source.

   No support added for options with arguments or bundled options. If support
   for option arguments is later desired, here's some code I've been using
   in other projects to achieve that:

   COUNT="$#"
   HELP="Try '$0 --help' for more information."
   while [ "$COUNT" != 0 ]; do                    # read command line options
       ARG="$1"; shift
       case "$ARG" in                             # handle '--opt=ARG'
           --[a-z]*=*)                            #   if has '=ARG' part
               set -- "${ARG#*=}" "$@"            #     put ARG back into $@
               ARG="${ARG%%=*}"                   #     strip off '=ARG' part
               ARGED=has_arg ;;
           *)  COUNT="$(( COUNT - 1 ))"
               ARGED=no_arg ;;
       esac
       case "$ARG" in
           --opt-with-arg) FIX_DEBUG=1  ; ARGED=used ;;
           -D|--debug) FIX_DEBUG=1  ;;
           -f|--force) FIX_FORCE=1  ;;
           --source)   OPT_SOURCE=1 ;;
           --) while [ "$COUNT" != 0 ]; do        #   put remaining args
                   set -- "$@" "$1"               #     last in $@
                   COUNT="$(( COUNT - 1 ))"
               done; break ;;                     #     and abort
           -*) die 15 "Unknown option '$ARG'" "$HELP" ;;
           *)  set -- "$@" "$ARG" ;;              #   put non-option arg back
       esac
       case "$ARGED" in
           has_arg) die "Option '$ARG' doesn't allow an argument" "$HELP" ;;
           used)
               [ "$#" = 0 ] && die "Option '$ARG' requires an argument" "$HELP"
               COUNT="$(( COUNT - 1 ))"
               shift ;;
       esac
   done
   unset COUNT ARG ARGED HELP
** DONE Add --help option
   CLOSED: [2015-11-13 Fri 16:21]
** DONE Add --version option
   CLOSED: [2015-11-13 Fri 16:36]
** DONE Find decent software license to use
   CLOSED: [2015-11-13 Fri 16:31]
   Settled on GPLv3 after reading GitHub's http://choosealicense.com/.

   I want a license that:

   + Require that I'm credited.
   + Allow people to make derivative work (which may be used for commercial
     purposes).
   + Require that derivative work are also freely available and use the same
     license.

   For non-code I usually use [[https://creativecommons.org/licenses/by-sa/3.0/][Creative Commons Attribution-ShareAlike]], and I
   want something similar, but suitable for code. (Creative Commons themselves
   recommend against using their licenses for code.)

   See also:
   + [[https://wiki.creativecommons.org/wiki/Frequently_Asked_Questions#Can_I_use_a_Creative_Commons_license_for_software.3F][Creative Commons FAQ: Can I apply a Creative Commons license to software?]]
** DONE Add version number to --version output + test case for that
   CLOSED: [2015-11-16 Mon 11:38]
   Fix's --version output at the time of implementation.

       fix.sh (Fix) 0.10.5
       Copyright (C) 2015 zrajm <fix@zrajm.org>
       License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

       For the latest version, see <https://github.com/zrajm/fix.sh>.

   + Version number follow "Semantic Versioning 2.0.0", described in
     http://semver.org/ (June 17, 2013 update).

   + Wording of the `--version` text follow "GNU Coding Standards", described
     in https://www.gnu.org/prep/standards/html_node/_002d_002dversion.html
     (April 23, 2015 update).

   Relevant parts of the description from "GNU Coding Standards":

   > The program's name should be a constant string; _don't_ compute it from
   > `argv[0]`. The idea is to state the standard or canonical name for the
   > program, not its file name. There are other ways to find out the precise
   > file name where a command is found in `PATH`.
   >
   > If the program is a subsidiary part of a larger package, mention the
   > package name in parentheses, like this:
   >
   >     emacsserver (GNU Emacs) 19.30

   and

   > The following line, after the version number line or lines, should be a
   > copyright notice. If more than one copyright notice is called for, put
   > each on a separate line.
   >
   > Next should follow a line stating the license, preferably using one of
   > abbreviations below, and a brief statement that the program is free
   > software, and that users are free to copy and change it. Also mention that
   > there is no warranty, to the extent permitted by law. See recommended
   > wording below.
   >
   > It is ok to finish the output with a list of the major authors of the
   > program, as a way of giving credit.

   and

   > This copyright notice only needs to mention the most recent year in which
   > changes were made---there's no need to list the years for previous
   > versions' changes. You don't have to mention the name of the program in
   > these notices, if that is inconvenient, since it appeared in the first
   > line.

   and

   > Write the word "Copyright" exactly like that, in English. Do not translate
   > it into another language. International treaties recognize the English
   > word "Copyright"; translations into other languages do not have legal
   > significance.
** DONE Renamed license file to follow GitHub standard
   CLOSED: [2015-11-16 Mon 18:11]
   Renamed license file `COPYING.txt` -> `LICENSE.txt` to follow GitHub
   standard repository layout:

   See: [[https://help.github.com/articles/open-source-licensing/#where-does-the-license-live-on-my-repository][GitHub Help: Where does the license live on my repository?]]
** DONE Automatic adding of buildscript as target dependency
   CLOSED: [2015-11-28 Sat 13:33]
** DONE Never test timestamp on metadata files
   CLOSED: [2015-11-28 Sat]
   They are always overwritten, as it seems unnecessary (and unnecessarily
   costly) to check whether newly written data is identical to previous data.
** DONE Dependency: Save buildscript checksum even if producing same TARGET
   CLOSED: [2015-11-28 Sat 22:29]
   When buildscript has changed, but in such a way as to still produce the same
   output as before (e.g. someone added a comment, blank line or similar to the
   buildscript), we still need to write the metadata file. (Since the checksum
   of the buildscript will be different, and we need to capture that.)

   Fix this, and make sure test case
   't/b06-rebuild-buildscript-modified-same-output.t' passes.
** DONE "Metadata" test description should be "Target metadata"
   CLOSED: [2015-11-29 Sun 17:08]
** DONE Rename tests so that options related tests come first
   CLOSED: [2015-11-29 Sun 18:00]
** DONE `prove xt/` should work with $BAIL_ON_FAIL set
   CLOSED: [2015-11-29 Sun 19:55]
** DONE Test metadata file content everywhere
   CLOSED: [2015-11-30 Mon 09:06]
   Verified that this is already done in all tests.
** DONE Test first line of metadata: It should be the target
   CLOSED: [2015-11-30 Mon 09:23]
