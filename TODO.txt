-*- org -*-

* [0/14] `dashtap.sh` program
** TODO Add init function for creating (optional) tempdir
** TODO Dashtap init function creating (optional) tempdir
   This should be used by both Fix and Docoptz tests. It needs to easily create
   a dir and cd to it.

   Maybe a test suite should create one tempdir, and then add subsequent tests
   to directories inside that directory?

   Maybe rewrite Dashtap's `test_init()` function?

   This function should create (and maybe cleanup?) tempdir for test output.
   (Exiting should be very careful to test that tempdir actually exists before
   attempting to delete it -- also avoid deleting if tests fails, to leave
   artifacts for user examination.)

       ---------------------------------------------------------------
       init_test() {
           TMPDIR="$(mktemp -dt "docoptz-${0##*/}-XXXXXX")" \
               || BAIL_OUT 'Cannot create tempdir'

           trap "[ -d '$TMPDIR' ] && rm -r '$TMPDIR'" EXIT
       }
       ---------------------------------------------------------------

   Hmm... Maybe even create just one directory when initializing Dashtap? And
   then create subdirectories for each specific test?
** TODO Remove `fix.sh` specific functions in `dashtap.sh`
   E.g. init_test(), and maybe cpdir(), mkmetadata()... are there more?

   This will also require modifying the `fix.sh` tests so that they can import
   these functions from its own repo-specific source.
** TODO Prefix internal dashtap functions with common string ('dt_'?)
   Ran into problems with seteval() when Fix.sh had a similar but different
   implementation of the same thing. Dashtap function should probably be called
   dt_seteval() or somesuch to avoid this.

   The test functions pass(), fail(), ok(), is() etc. should retain their
   current names however (to retain test file readability).
** TODO is_same_env() fails on multi-line values
   If a any variable in the environment contain a newline, then all bets are
   off and is_same_env() WILL fail in unpredictable ways.

   The easiest fix for this would be keep a small history and make sure that
   for every value `[ "$PREV" \< "$CURR" ]` is always true, and die() if this
   is not the case. This wouldn't solve the actual problem, but clue in the
   user as to the fact that something is wrong, rather than die silently.
** TODO Create is_in_env() function
   Should allow one to compare multiple variables at once (so that envdump file
   only has to be loaded once), so that one can write something like this:

       is_in_env \
           "FIX_SCRIPT_DIR=/env1" "\$FIX_SCRIPT_DIR should not be changed" \
           "FIX_SOURCE_DIR=/env2" "\$FIX_SOURCE_DIR should not be changed" \
           "FIX_TARGET_DIR=/env3" "\$FIX_TARGET_DIR should not be changed"

   Instead of the current:

       seteval + ENV stdin <"env2.txt"
       like "$ENV" "${NL}FIX_SCRIPT_DIR='/env1'$NL" "\$FIX_SCRIPT_DIR should not be changed"
       like "$ENV" "${NL}FIX_SOURCE_DIR='/env2'$NL" "\$FIX_SOURCE_DIR should not be changed"
       like "$ENV" "${NL}FIX_TARGET_DIR='/env3'$NL" "\$FIX_TARGET_DIR should not be changed"

   Error output should not contain a whole dump of the environment, but instead
   just show the actual value, or alert that it's unset.

   `t/unit-load-config.t` could use some TLC when this is in place.
** TODO Functions that read stdin shouldn't test stdin to determine when
   Functions that read standard input should not determine whether or not to
   read it by testing whether there is anything to read. Instead some other
   factor (e.g. number of args) should be used to determine whether or not to
   read it, and then give an error if there was nothing to read. (This to avoid
   that nested functions all reading from standard input interfere with each
   other; using e.g. 'diag "SOMETHING" <&-' to stop this is too easy to
   forget.)
*** TODO 'indent'
    Only called from inside 'dashtap.sh', and never using stdin.
*** TODO 'note' (and thereby 'diag')
*** TODO 'setread'
*** TODO 'write_file'
*** DONE 'match'
*** DONE 'execute'
    CLOSED: [2014-07-22 Tue 14:29]
** TODO Is 'file_is' failure diagnostic good enough?
   'file_is' simply calls 'is', which means that the file name is not included
   in the diagnostics -- it probably should be.
** TODO Is 'file_is', 'is_changed' and 'is_unchanged' fail good enough?
   What kind of fail message do we get if the file is missing? They all output
   the same thing, which means that these tests cannot be distinguished on the
   diagnostics output alone. :/
** TODO Rewrite 'descr' so as to not use $(...)
   Instead of calling as:

       local XX=$(descr SKIP "$1")

   it should maybe be called as:

       local XX="$1"
       descr XX SKIP

   or somesuch.
** TODO Eliminate as many $(...) as possible
   Each $(...) starts a subshell, which is inefficient, this should be avoided
   whenever possible.

   Could this be avoided in 'setread', for example?
** TODO Separate docs from source code
   Using Markdown?
** TODO Put Dashtap in its own GitHub repo
   This would have to be automatically cloned and built by the Fix.sh build
   system. (Or at least have a very simple way of doing this described in the
   README.)
** TODO Merge 'is_changed' and 'is_unchanged' to follow DRY
** TODO Make sure all error messages use 'error'
* TODO README
  Include a introduction to how to use Dashtap in the README.
* [0/1] To think about
** TODO Merge 'execute' and 'seteval'?
* [0/28] Testing
** TODO Use execute() for all tests(?)
   But some do, should the remaining tests also use it? (or do they need the
   explicit subshell?)

   Should execute() also save the current shell options ($-) of its subshell,
   when finishing execution. -- This would presumably be done in the `trap` of
   the subshell invoked by execute().
** TODO Add test cases which run under `set -e`
   Each function should be tested with the shell option `-e` set. Test should
   verify both that each function work as expected, but also that the shell
   option isn't modified in the global scope.

   NOTE: Some Dashtap functions are probably broken under `set -e`. Since using
   `&&` at the end of a function, when the condition evaluates as false will
   cause a function to abort if `set -e` is in effect.
** TODO Tests should use 'title'
** TODO 'dashtap-todo.t' and 'dashtap-skip.t' should be very similar
   Currently there is some testing of ' and " in one of them.
** TODO Test 'dashtap_init'
** TODO Test 'dashtap_exit'
** TODO Test 'done_testing'
** TODO Test 'skip_all'
** TODO Test 'BAIL_OUT'
** TODO Test 'diag'
** TODO Test 'note'
** TODO Test 'result'
** TODO Test 'pass'
** TODO Test 'fail'
** TODO Test 'ok'
** TODO Improve 'is' tests
   FIXMEs in 'xt/dashtap-is.t' have more info
** TODO Improve 'isnt' tests
   FIXMEs in 'xt/dashtap-isnt.t' have more info
** TODO Test 'file_is'
** TODO Test 'file_exist'
** TODO Test 'file_not_exist'
** TODO Test 'timestamp'
** TODO Test 'is_unchanged'
** TODO Test 'init_test'
** TODO Test 'mkpath'
** TODO Test 'chtime'
** TODO Test 'write_file'
** TODO Test that each function is tested
** TODO Test whether each function returns or exits
* DONE
** DONE Test 'indent'
   CLOSED: [2014-07-11 Fri 10:19]
** DONE Test 'evalset'
   CLOSED: [2014-07-11 Fri 13:22]
** DONE Test 'error'
   CLOSED: [2014-07-11 Fri 16:53]
** DONE Add TODO tests
   CLOSED: [2014-07-12 Sat 18:18]
** DONE Change 'write_file' argument order
   CLOSED: [2014-07-13 Sun 06:27]
   Permission bits & date should come *before* filename (to be consistent with
   touch and chmod).
** DONE Add SKIP tests
   CLOSED: [2014-07-17 Thu 19:49]
** DONE Test 'TODO'
   CLOSED: [2014-07-18 Fri 18:31]
** DONE Test 'END_TODO'
   CLOSED: [2014-07-18 Fri 18:31]
** DONE 'execute' should use only one trap
   CLOSED: [2014-07-20 Sun 09:10]
   A simple echo should suffice to catch the 'FULL' case, instead of the trap
   at the end of the 'execute' function.
** DONE Test 'varname'
   CLOSED: [2014-07-20 Sun 15:01]
** DONE 'varname' should not allow empty string or '_'                  :BUG:
   CLOSED: [2014-07-20 Sun 15:01]
** DONE Added 'strip_newline' and modified 'seteval' to make use of it
   CLOSED: [2014-07-20 Sun 18:38]
** DONE Added test cases for 'strip_newline'
   CLOSED: [2014-07-20 Sun 18:40]
** DONE Add function 'setread VARNAME [+] [<FILE]'
   CLOSED: [2014-07-20 Sun 19:32]
   Should read standard input into variable named VARNAME (preserving all
   whitespace). This function should be used by 'file_is', and 'execute'.
** DONE 'execute' and 'file_is' now uses 'setread'
   CLOSED: [2014-07-21 Mon 14:43]
** DONE 'file_is' should only strip one trailing newline                :BUG:
   CLOSED: [2014-07-21 Mon 15:01]
   When this works, add test with two trailing newlines to
   'dashtap-strip_newline.t' as well.
** DONE Dashtap variables should have prefix DASHTAP_*
   CLOSED: [2014-07-21 Mon 16:06]
   Not TEST_* as they have now.
** DONE No references to DASHTAP_* variables outside 'dashtap.sh' itself
   CLOSED: [2014-07-21 Mon 16:06]
   Added 'dashtap_init' which can be used to re-initialize the variables (e.g.
   in author tests).
** DONE Function to test if a function exists
   CLOSED: [2014-07-21 Mon 22:02]
** DONE Rename test functions '*_exist' -> '*_exists'
   CLOSED: [2014-07-22 Tue 00:47]
** WONT 'setread' should refuse pipe input
   CLOSED: [2014-07-22 Tue 00:59]
   We could use [ -p /dev/stdin ] in 'setread' to test whether was invoked in a
   pipe or not. But stopping the user from doing this would backfire, since it
   is sometimes desirable to use it in this way.

   E.g. if 'match' uses 'setread' to read its input from standard input, and
   then match was invoked by `echo "$STR" | match "$SUBSTR"`, the pipe error
   would abort match even though the only thing relevant here is the return
   status of 'match'.
** DONE Quote all <<"EOF" in test scripts
   CLOSED: [2014-07-22 Tue 01:06]
** DONE Test reading of stdin for 'match' function
   CLOSED: [2014-07-22 Tue 01:43]
** DONE Test 'execute'
   CLOSED: [2014-07-22 Tue 14:26]
** DONE 'setread' should support third string arg
   CLOSED: [2014-07-22 Tue 19:27]
   When this is added, also add a test to 'dashtap-setread.t' which test how
   'setread' reacts to input that does not end in newline.
** DONE 'title' -- Extra fail message
   CLOSED: [2014-07-23 Wed 03:43]
   Output as 'note' whenever it occurs, but also added as an extra fail message
   that can be set by a command, which will be displayed only as a diagnostic
   if there is a failure, and which is valid until it is reset.

   E.g. 'extra "TODO-related tests"' would add an extra line to the beginning
   of the failure message, like this:

       not ok 35 - Exit status
       #   TODO-related tests
       #   Failed test 'Exit status'
       #   in 'xt/dashtap-todo.t'
       #     GOT   : 255
       #     WANTED: 1
*** DONE 'seteval' argument change
    CLOSED: [2014-07-22 Tue 21:17]
    '+' should be first arg in parallel to 'setread'
*** DONE 'setread' argument change
    CLOSED: [2014-07-22 Tue 19:25]
    '+' should be first arg, to allow for unambiguous 3rd argument.
** DONE Test 'title'
   CLOSED: [2014-07-23 Wed 03:48]
** DONE Test 'end_title'
   CLOSED: [2014-07-23 Wed 03:49]
** DONE Test 'is'
   CLOSED: [2014-07-26 Sat 18:26]
** DONE Added 'isnt' function + tests
   CLOSED: [2014-07-26 Sat 19:44]
** DONE Fix space-in-filename problem with timestamps                   :BUG:
   CLOSED: [2014-07-26 Sat 19:46]
   'timestamp'/'is_changed'/'is_unchanged'

** DONE Added 'reset_timestamp' function
   CLOSED: [2014-07-26 Sat 19:46]
   Plus related functions 'timestamp_file' and 'timestamp_time'.
** WONT Should 'error' output be compatible with TAP?
   CLOSED: [2014-07-27 Sun 22:22]
   Currently 'error' just aborts and outputs something on stderr, but should it
   also be prefixed with '# '?

   -- No. Tests should only be evaluated by the test functions, because if an
   error messages throw a test fail, the user will not have any control over
   the test description string. (And TODO/SKIP etc. gets inherited -- not
   acceptable.)

   It is, however acceptable to have a function like 'is_changed' (a test
   function) to fail, and advisable to have some special output acknowledging
   this fact.
** DONE Test 'END_TODO'
   CLOSED: [2014-07-28 Mon 01:56]
** DONE Test 'END_SKIP'
   CLOSED: [2014-07-28 Mon 01:57]
** DONE Improve 'end_title' tests
   CLOSED: [2014-07-28 Mon 01:57]
** DONE 'fail' and 'pass' now also adheres to 'SKIP' mode
   CLOSED: [2014-07-28 Mon 01:57]
   Not the neatest solution, maybe. But since user is allowed to call 'pass'
   and 'fail' directly, this must be supported. Currently this involves quite a
   if cases all testing to see if '# SKIP' is part of the current test
   description, however. :( -- Well, it works, anyway!
** DONE Test functions should use 'else', not 'return'
   CLOSED: [2014-07-28 Mon 02:19]
** DONE Explicit return values when return is used
   CLOSED: [2014-07-28 Mon 02:19]
** DONE Test 'import_function'
   CLOSED: [2016-02-28 Sun 15:35]
** DONE Test 'stdin'
   CLOSED: [2016-05-30 Mon 09:40]
* [eof]
